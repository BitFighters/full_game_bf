/* eslint no-unused-vars: 0 */
/* eslint camelcase: 0 */

import {
  table,
  hashKey,
  rangeKey,
  attribute,
  autoGeneratedHashKey,
} from "@aws/dynamodb-data-mapper-annotations";
import { makeTableName } from "@services/utils";
import { DB_CONFIG } from "@config/db_config";
import GlobalSecondaryIndex from "./global";
import { PerIndexOptions, SecondaryIndexOptions } from "@aws/dynamodb-data-mapper";
import { mapper } from "@services/db/connection";
import { ANAKIN_LOGGER } from "@services/logger";

@table(makeTableName(DB_CONFIG.TABLES.WEB2_USERS))
export default class WEB2_USERS extends GlobalSecondaryIndex {
  @hashKey()
  email: string;
  
  @attribute()
  user_wallet_address: string;

  @attribute()
  password: string;

  @attribute({ defaultProvider: () => new Date().getTime() })
  created_at: number;

  @attribute({ defaultProvider: () => new Date().getTime() })
  updated_at: number;

  public static global_secondary_indices = {
    moderator_mapper: {
      writeCapacityUnits: 5,
      readCapacityUnits: 5,
      type: "global",
      projection: "all",
    } as SecondaryIndexOptions,
  } as PerIndexOptions;

  public static async addUserToWeb2DB(
    email: string,
    user_wallet_address: string,
    password: string,
  ) {
    try {
      await mapper.put(Object.assign(new WEB2_USERS(),
            { email, user_wallet_address, password}));
    } catch (err) {
      throw err;
    }
  }

  public static async getItemFromWeb2DB(
    email: string,
  ) {
    // let data = await mapper.query(WEB2_USERS, {email});
    return await mapper.get(
      Object.assign(new WEB2_USERS(), {
        email
      })
    );
  }
}
